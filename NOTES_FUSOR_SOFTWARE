===============================================
TITLE: INTRODUCTION
===============================================

This software is comprised of 2 programs:
- get_data:  reads analog data and transmits the data to the display program via internet connection
- display:   received the data values from the get_data program, 
             reads image from webcam,
             displays the webcam image, analog values, and graph of analog values
             records the data to file so it can be reviewed later

These 2 programs could be run on the same computer, using the loopback network interface;
however it is best to run them on seperate computers for the following reasons:
- ADC Ground Loops - When the Raspberry Pi, that has the ADC converters attached, is powered
  by an AC supply then an AC ripple is seen on the ADC data. To avoid this I power this
  Raspberry PI by a rechargeable battery, and don't connect a display.
- The High Speed ADC converter being used to analyze the pulses from the HE3 Proportional
  Counter does not work well when the Webcam is attached to the same Raspberry PI.

Hardware Diagram of my system ...

        voltage
                 \ -------
        current -- |ADC-1|           
                 / ------- \       ----------                -----------  monitor
        pressure            --usb--|  RPI   |- - - wifi - - -| RPI     |/
                            --usb--|  Data  |               /| Display |\
                   ------- /       ----------         --usb- -----------  -- usb-- keyboard & mouse
  scaler --- R ----|ADC-2|             |              |           |
                   -------             |           webcam         |
                                     Battery                    AC Power
                                     Power                      Adapter

    RPI-Data and RPI-Display:  Raspberry PI 3. The get_data program is run on RPI-Data; and
        the display program is run on RPI-Display.

    ADC-1: Dataq Instruments DI-149. Specs: 10 kHz max sample rate, differential inputs.

    ADC-2: Measurement Computing USB-204.  Specs 500 kHz max sample rate. SE Analog inputs.
        This needs to be high sample rate because the pulses from the scaler are only
        about 2 us wide.

    voltage, current:  sensor outputs from HV power supply 
        (** NOT THE ACTUAL HIGH VOLTAGE FROM THE SUPPLY **)

    pressure:  analog output voltage from Kurt J Lesker 275i Pirani Gauge

    battery:  USB Battery Pack for Raspberry Pi - 10000mAh - 2 x 5V outputs
        https://www.adafruit.com/product/1566

    scaler:  Ludlum 2929 Dual channel scaler.  This scaler has an Amp Out BNC connector, which
        is connected to ADC-2 through Resistor R.

    R:  Connecting the scaler to ADC-2 presents a problem because the scaler (Ludlum 2929) Amp Out 
        connection provides voltages that can be as high is 22 volts, and the pulse width is 
        about 2 us, which is the same as the ADC-2 sample rate. So, the scaler amp out pulses
        need to be shorter and wider. After trying a few approaches that yielded unexpected 
        results I found that a 25K ohn series resisitor yields the desired result.

The software can be obtained from https://github.com/sthaid/proj_fusor.git. 
Source code files are:
- display.c          - the display prgram
- get_data.c         - the get_data progam
Utilities
- util_cam.c         - acquire streaming jpeg from webcam
- util_jpeg_decode.c - convert jpeg to yuy2 pixel format
- util_dataq.c       - interface to the Dataq Instruments DI-149 
- util_mccdaq.c      - interface to the Measurement Computing USB-204
- util_misc.c        - logging, time, etc
- util_sdl.c         - simplified interface to Simple Direct Media Layer
- util_sdl_predefined_displays.c

The get_data program acquires data from the 2 ADC devices, analyzes the data and
formats a data_t (see common.h). Once the display program establishes a connection
to the get_data program, then the data_t is sent to the display program once per
second. Note that the data_t has placeholders for the webcam jpeg buff, but the
jpeg buff is filled in by the display program when it receives the data_t.

The display program receives the ADC data from the get_data program in a data_t
structure, once per second. The display program adds the webcam image to the data_t,
and writes the data to a file so that it can be reviewed later. While the data is
being received (LIVE mode) the display program will also display the data in real time
as it is received. The webcam image is displayed in the upper left corner. The 
voltage, current, pressure, and neutron rate are displayed in the upper right corner.
And graphs are presented on the lower half of this display. The graph types that are
displayed include;
  SUMMARY: the voltage, current, pressure, and neutron cpm vs. time 
  ADC SAMPLES: raw sample values, converted to voltage,  from the ADC-1 and ADC-2 converters. 
  CPM:  counts per minute from the He3 proportional counter, in 8 channels, and
        a range of averaging intervals

Since my fusor is not complete, I have tested this software in various ways
without fusion. The HV power supply sensor has been tested, but the current has not.
The Pirani gauge pressure analog output has been tested. And the He3 Proportional counter
pulse outputs have been tested using background radiation events. The webcam has also 
been tested.

===============================================
TITLE: BUILD THE SOFTWARE
===============================================

First install and configure the Raspberry Pi computers as described in the
NOTES_RASPBERRY_PI file.

To build ...
  git clone https://github.com/sthaid/proj_fusor.git
  cd proj_fusor
  make

To automatically start get_data when the RPI-Data boots, edit /etc/rc.local and add the
following:
  # Start get_data
  if [ -x /home/<user_id>/proj_fusor/get_data ]
  then
    su <user_id> -c "cd /home/<user_id>/proj_fusor; ./get_data </dev/null &>>get_data.log &"
  fi

===============================================
TITLE: RUNNING THE SOFTWARE
===============================================

Get_data program should start when the battery power is applied to the RPI-Data, assuming
that the suggested change to /etc/rc.local has been made.

The display program is typically executed without command line options. In this case the display program
will establish conection with the get_data program, and receive and display the data. The 
runtime controls include:
- left-arrow, right-arrow, ctrl-left-arrow, ctrl-right-arrow, alt-left-arrow, alt-right-arrow,
  home, end:  adjusts the time of displayed data
- '-', '+': adjusts the X axis time duration for some graphs
- '1', '2': adjusts the Y axis scale for some graphs
- 's', 'S': selects a different graph
- other available controls are displayed as (X), such as (ESC) to terminate program.

The cmd line options for the display program are:
-h          : help
-v          : version
-g WxH      : window width and height, default 1920x1080
-s name     : server name
-p filename : playback file
-x          : don't capture cam data in live mode
-t secs     : generate test data file, secs long

===============================================
TITLE: BUGS  
===============================================

-------- BUG 1 --------

The get_data program crashes after running for 8001 seconds duration. Snip of output from the
get_data.log file is shown below

07/18/16 23:01:17.019  duration=8001  samples=476880  mccdaq_restarts=2  pulse_threshold-2048=346
   1:     0     0     0     0     0     0     0     0
        0.0   0.0   0.0   0.0   0.0   0.0   0.0   0.0
  10:     0     0     0     0     0     0     0     0
        0.0   0.0   0.0   0.0   0.0   0.0   0.0   0.0
  60:     1     0     0     0     0     0     0     0
        1.0   0.0   0.0   0.0   0.0   0.0   0.0   0.0
 600:     1     0     0     0     0     0     0     0
        0.1   0.0   0.0   0.0   0.0   0.0   0.0   0.0
3600:     1     0     0     0     0     0     0     0
        0.0   0.0   0.0   0.0   0.0   0.0   0.0   0.0

07/18/16 23:01:17.019 ERROR dataq_get_adc_samples: adc data not available
07/18/16 23:01:17.019 ERROR dataq_get_adc_samples: adc data not available
07/18/16 23:01:17.019 ERROR dataq_get_adc_samples: adc data not available
07/18/16 23:01:18.000 ERROR dataq_get_adc: adc data not available
07/18/16 23:01:18.005 ERROR dataq_get_adc: adc data not available
07/18/16 23:01:18.005 ERROR dataq_get_adc: adc data not available
07/18/16 23:01:18.013  duration=8002  samples=475984  mccdaq_restarts=1  pulse_threshold-2048=347
   1:     0     0     0     0     0     0     0     0
        0.0   0.0   0.0   0.0   0.0   0.0   0.0   0.0



